<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Featured on The Python Corner</title><link>https://mastro35.github.io/tpc/tags/featured/</link><description>Recent content in Featured on The Python Corner</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Davide Mastromatteo</copyright><lastBuildDate>Tue, 22 Oct 2019 00:00:45 +0200</lastBuildDate><atom:link href="https://mastro35.github.io/tpc/tags/featured/index.xml" rel="self" type="application/rss+xml"/><item><title>The Detailed Guide on Sending Emails from your Python App</title><link>https://mastro35.github.io/tpc/posts/2019-10-22-the-detailed-guide-on-sending-emails-from-your-python-app/</link><pubDate>Tue, 22 Oct 2019 00:00:45 +0200</pubDate><guid>https://mastro35.github.io/tpc/posts/2019-10-22-the-detailed-guide-on-sending-emails-from-your-python-app/</guid><description>Hey there! Now you are reading a quick but detailed guide on adding the essential functionality to your web app built with Python: email sending. From this post, you will learn about the capabilities of the native Python modules for email sending and then get the practical steps for creating a message with images and attachments. With plenty of code examples, you will be able to craft and send your own emails using an SMTP server.</description></item><item><title>Speed up your code by using a cache in Python</title><link>https://mastro35.github.io/tpc/posts/2018-04-26-how-to-make-your-code-faster-by-using-a-cache-in-python/</link><pubDate>Thu, 26 Apr 2018 11:26:00 +0200</pubDate><guid>https://mastro35.github.io/tpc/posts/2018-04-26-how-to-make-your-code-faster-by-using-a-cache-in-python/</guid><description>If the first concern of a developer is to be sure that the code they write works well, the second one is to make sure that it run fast. This is expecially true when you&amp;rsquo;re dealing with web applications, where the scalability of your application is a crucial topic. For this reason, one of the most important tool we can use to improve the speed of our code is the use of a cache system.</description></item><item><title>When To Use Generators in Python</title><link>https://mastro35.github.io/tpc/posts/2018-04-17-generators-in-python-should-i-use-them/</link><pubDate>Tue, 17 Apr 2018 11:46:00 +0200</pubDate><guid>https://mastro35.github.io/tpc/posts/2018-04-17-generators-in-python-should-i-use-them/</guid><description>Following a request of a reader, today we&amp;rsquo;re going to discuss when to use iterators and generators in Python.
First of all, it&amp;rsquo;s important to know what iterators and generators are, so if you don&amp;rsquo;t know exactly what they are, I suggest to have a look at my previous article on this topic.
Now that everything is clear, we can start analyzing when to use these features.
Let&amp;rsquo;s start saying that if you have read my previous article, the use of the iterator protocol should be quite clear: you use iterator protocol when you have a custom object that you want to be &amp;ldquo;iterable&amp;rdquo;.</description></item><item><title>Lambdas and functions in Python</title><link>https://mastro35.github.io/tpc/posts/2017-12-13-lambdas-and-functions-in-python/</link><pubDate>Wed, 13 Dec 2017 19:06:00 +0100</pubDate><guid>https://mastro35.github.io/tpc/posts/2017-12-13-lambdas-and-functions-in-python/</guid><description>In my last post, I discussed some ways to avoid nested code in Python and discussing the &amp;ldquo;filter&amp;rdquo; and &amp;ldquo;map&amp;rdquo; functions I mentioned the lambda functions.
After that article, some reader asked me to write a little more about this topic, so &amp;hellip; here I am. :)
Let&amp;rsquo;s start with a mantra. If you want to know what something is, in Python, just use your REPL.
So, start the Python REPL and define a lambda:</description></item><item><title>The art of avoiding nested code</title><link>https://mastro35.github.io/tpc/posts/2017-12-04-the-art-of-avoiding-nested-code/</link><pubDate>Mon, 04 Dec 2017 23:34:42 +0100</pubDate><guid>https://mastro35.github.io/tpc/posts/2017-12-04-the-art-of-avoiding-nested-code/</guid><description>Today&amp;rsquo;s article is about nested code and how to avoid it.
Why we should try to avoid nested code? Well the answer is inside your heart, and in your Python interpreter&amp;hellip;
Start your REPL and write:
1&amp;gt;&amp;gt;&amp;gt; import this you will get the &amp;ldquo;Zen Of Python&amp;rdquo; by Tim Peters.
The Zen of Python, by Tim Peters
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.</description></item><item><title>Logging in Python</title><link>https://mastro35.github.io/tpc/posts/2017-08-29-logging-in-python/</link><pubDate>Tue, 29 Aug 2017 13:02:52 +0200</pubDate><guid>https://mastro35.github.io/tpc/posts/2017-08-29-logging-in-python/</guid><description>One of the most underestimated topics that I&amp;rsquo;ve seen in my working experience is logs management. A lot of people don&amp;rsquo;t care at all about logging the execution of their programs and I&amp;rsquo;ve seen a lot of code released in the production environment that doesn&amp;rsquo;t log anything. To log seems to be a waste of time to them, especially if the code they&amp;rsquo;re writing is apparently simple. So, why bother logging the execution of a program if the program can run great with no logs?</description></item><item><title>Writing a FUSE filesystem in Python</title><link>https://mastro35.github.io/tpc/posts/2017-02-28-writing-a-fuse-filesystem-in-python/</link><pubDate>Tue, 28 Feb 2017 00:11:19 +0100</pubDate><guid>https://mastro35.github.io/tpc/posts/2017-02-28-writing-a-fuse-filesystem-in-python/</guid><description>We ran into a problem last week. Our web application produces a lot of documents that have to be accessed frequently for a couple of months after they&amp;rsquo;re created. However, in less than a year these documents will be almost never accessed anymore, but we need to keep them available for the web application and for tons of other legacy apps that might need to access them.
Now, these documents take a lot of space on our expensive but super fast storage system (let&amp;rsquo;s call it primary storage system or PSS from now on) and we would like to be able to move them on the cheaper, not so good and yet quite slow storage system (that we&amp;rsquo;re going to call secondary storage system or SSS) when we believe that they will not be accessed anymore.</description></item><item><title>Working with Exception in Python</title><link>https://mastro35.github.io/tpc/posts/2017-01-10-working-with-exception-in-python/</link><pubDate>Tue, 10 Jan 2017 19:02:01 +0100</pubDate><guid>https://mastro35.github.io/tpc/posts/2017-01-10-working-with-exception-in-python/</guid><description>According to the official documentation, an exception is &amp;ldquo;an error detected during execution not unconditionally fatal&amp;rdquo;. Let&amp;rsquo;s start the interpreter and write:
1&amp;gt;&amp;gt;&amp;gt; 5/0 2Traceback (most recent call last): 3 File &amp;#34;&amp;lt;pyshell#7&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; 4 5/0 5ZeroDivisionError: division by zero As you can see we asked the interpreter to divide the number 5 by 0. Even if our request was syntactically correct when the interpreter tried to compute it, it &amp;ldquo;raised&amp;rdquo; the ZeroDivisionError exception to signal us that we asked something impossible.</description></item><item><title>Python Metaclasses</title><link>https://mastro35.github.io/tpc/posts/2016-12-22-python-metaclasses/</link><pubDate>Thu, 22 Dec 2016 12:31:01 +0100</pubDate><guid>https://mastro35.github.io/tpc/posts/2016-12-22-python-metaclasses/</guid><description>Working with Python means working with objects because, in Python, everything is an object. So, for example:
1&amp;gt;&amp;gt;&amp;gt; type(1) 2&amp;lt;class &amp;#39;int&amp;#39;&amp;gt; 3&amp;gt;&amp;gt;&amp;gt; type(&amp;#39;x&amp;#39;) 4&amp;lt;class &amp;#39;str&amp;#39;&amp;gt; As you can see, even basic types like integer and strings are objects, in particular, they are respectively instances of int and str classes. So, since everything is an object and given that an object is an instance of a class&amp;hellip; what is a class?</description></item></channel></rss>