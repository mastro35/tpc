<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Filesystem on The Python Corner</title>
    <link>https://mastro35.github.io/tpc/tags/filesystem/</link>
    <description>Recent content in Filesystem on The Python Corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Davide Mastromatteo</copyright>
    <lastBuildDate>Sun, 13 Jan 2019 19:08:55 +0100</lastBuildDate><atom:link href="https://mastro35.github.io/tpc/tags/filesystem/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to create a watchdog in Python to look for filesystem changes</title>
      <link>https://mastro35.github.io/tpc/posts/2019-01-13-how-to-create-a-watchdog-in-python-to-look-for-filesystem-changes/</link>
      <pubDate>Sun, 13 Jan 2019 19:08:55 +0100</pubDate>
      
      <guid>https://mastro35.github.io/tpc/posts/2019-01-13-how-to-create-a-watchdog-in-python-to-look-for-filesystem-changes/</guid>
      <description>Hey guys, today&amp;rsquo;s post is about how to create a watchdog in Python. But what is a &amp;ldquo;watchdog&amp;rdquo;?
A watchdog is a little piece of software that monitors our filesystem looking for any changes (like the creation, change or deletion of a file or of a directory). When a change occurs, the watchdog report it to us raising a specific event that we can handle.
For example, let&amp;rsquo;s suppose you have developed a program that use a configuration file.</description>
    </item>
    
    <item>
      <title>Writing a FUSE filesystem in Python</title>
      <link>https://mastro35.github.io/tpc/posts/2017-02-28-writing-a-fuse-filesystem-in-python/</link>
      <pubDate>Tue, 28 Feb 2017 00:11:19 +0100</pubDate>
      
      <guid>https://mastro35.github.io/tpc/posts/2017-02-28-writing-a-fuse-filesystem-in-python/</guid>
      <description>We ran into a problem last week. Our web application produces a lot of documents that have to be accessed frequently for a couple of months after they&amp;rsquo;re created. However, in less than a year these documents will be almost never accessed anymore, but we need to keep them available for the web application and for tons of other legacy apps that might need to access them.
Now, these documents take a lot of space on our expensive but super fast storage system (let&amp;rsquo;s call it primary storage system or PSS from now on) and we would like to be able to move them on the cheaper, not so good and yet quite slow storage system (that we&amp;rsquo;re going to call secondary storage system or SSS) when we believe that they will not be accessed anymore.</description>
    </item>
    
  </channel>
</rss>
