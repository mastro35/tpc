<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>generators on The Python Corner</title>
    <link>https://mastro35.github.io/tpc/tags/generators/</link>
    <description>Recent content in generators on The Python Corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Davide Mastromatteo</copyright>
    <lastBuildDate>Tue, 17 Apr 2018 11:46:00 +0200</lastBuildDate><atom:link href="https://mastro35.github.io/tpc/tags/generators/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>When To Use Generators in Python</title>
      <link>https://mastro35.github.io/tpc/posts/2018-04-17-generators-in-python-should-i-use-them/</link>
      <pubDate>Tue, 17 Apr 2018 11:46:00 +0200</pubDate>
      
      <guid>https://mastro35.github.io/tpc/posts/2018-04-17-generators-in-python-should-i-use-them/</guid>
      <description>Following a request of a reader, today we&amp;rsquo;re going to discuss when to use iterators and generators in Python.
First of all, it&amp;rsquo;s important to know what iterators and generators are, so if you don&amp;rsquo;t know exactly what they are, I suggest to have a look at my previous article on this topic.
Now that everything is clear, we can start analyzing when to use these features.
 Let&amp;rsquo;s start saying that if you have read my previous article, the use of the iterator protocol should be quite clear: you use iterator protocol when you have a custom object that you want to be &amp;ldquo;iterable&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Iterators and Generators in Python</title>
      <link>https://mastro35.github.io/tpc/posts/2016-11-22-iterators-generators-python/</link>
      <pubDate>Tue, 22 Nov 2016 00:00:49 +0100</pubDate>
      
      <guid>https://mastro35.github.io/tpc/posts/2016-11-22-iterators-generators-python/</guid>
      <description>If you have written some code in Python, something more than the simple &amp;ldquo;Hello World&amp;rdquo; program, you have probably used iterable objects. Iterable objects are objects that conform to the Iteration Protocol and can hence be used in a loop.
For example:
1for i in range(50): 2 print(i) In this example, the range(50) is an iterable object that provides, at each iteration, a different value that is assigned to the i variable.</description>
    </item>
    
  </channel>
</rss>
