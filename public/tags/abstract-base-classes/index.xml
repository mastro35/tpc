<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Abstract Base Classes on The Python Corner</title>
    <link>https://mastro35.github.io/tpc/tags/abstract-base-classes/</link>
    <description>Recent content in Abstract Base Classes on The Python Corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Davide Mastromatteo</copyright>
    <lastBuildDate>Thu, 22 Dec 2016 12:31:01 +0100</lastBuildDate><atom:link href="https://mastro35.github.io/tpc/tags/abstract-base-classes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Metaclasses</title>
      <link>https://mastro35.github.io/tpc/posts/2016-12-22-python-metaclasses/</link>
      <pubDate>Thu, 22 Dec 2016 12:31:01 +0100</pubDate>
      
      <guid>https://mastro35.github.io/tpc/posts/2016-12-22-python-metaclasses/</guid>
      <description>Working with Python means working with objects because, in Python, everything is an object. So, for example:
1&amp;gt;&amp;gt;&amp;gt; type(1) 2&amp;lt;class &amp;#39;int&amp;#39;&amp;gt; 3&amp;gt;&amp;gt;&amp;gt; type(&amp;#39;x&amp;#39;) 4&amp;lt;class &amp;#39;str&amp;#39;&amp;gt; As you can see, even basic types like integer and strings are objects, in particular, they are respectively instances of int and str classes. So, since everything is an object and given that an object is an instance of a class&amp;hellip; what is a class?</description>
    </item>
    
  </channel>
</rss>
